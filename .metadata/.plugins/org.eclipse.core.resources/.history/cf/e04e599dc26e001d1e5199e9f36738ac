package tablemodel;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.table.AbstractTableModel;

//JTable은 유지 보수성을 높이기 위해, 데이터와 디자인을 분리시키기 위한 방법을 제공해주며
//이때 사용되는 객체가 바로 TableModel이다
public class EmpModel extends AbstractTableModel{
	//TableModel이 보유한 메서드들은 JTable이 호출하여 화면에 반영한다
	AppMain2 appMain2;
	String[][] data=new String[5][3];
	
	//태어날 때 AppMain2를 넘겨받자
	public EmpModel(AppMain2 appMain2) {
		this.appMain2=appMain2;
	}
	
	//EMP의 레코드 가져오기
	public void select() {
		PreparedStatement patmt=null;
		ResultSet rs=null;
		
		String sql="select * from emp order by empno asc";
		
		try {
			patmt=appMain2.con.prepareStatement(sql);
			rs=patmt.executeQuery(); //select 수행 후 테이블 반환
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			appMain2.release(patmt, rs);
		}
	}
	
	//총 레코드 수
	public int getRowCount() {
		return 10;
	}

	//컬럼 수
	public int getColumnCount() {
		return 3;
	}
	
	//이차원 배열을 이루는 각 요소들에 들어있는 값 반환
	public Object getValueAt(int rowIndex, int columnIndex) {
		return "apple";
	}
	
}
